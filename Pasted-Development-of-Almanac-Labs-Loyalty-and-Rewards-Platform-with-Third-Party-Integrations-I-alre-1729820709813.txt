Development of "Almanac Labs" - Loyalty and Rewards Platform with Third-Party Integrations

I already have a GitHub repository that has started the project. Use the below instructions on how to complete the project using the codebase that is already created.

Project Overview:

"Almanac Labs" is a multi-tenant loyalty and rewards platform designed for enterprise businesses, sports teams, leagues, events, and musicians. It combines traditional loyalty mechanisms with blockchain technology and integrates with essential third-party services to enhance user engagement and program management.

Objective:

To develop a robust API suite that mimics the Open Loyalty API for the rewards and loyalty engine, implement a multi-tenancy structure using Supabase, integrate necessary third-party APIs and SDKs, create an intuitive administrative dashboard for clients to manage their loyalty and rewards programs, create a dual-wallet functionality for web2 rewards and web3 NFT/cNFTs/crypto assets in the API, and develop/enhance the homepage to include more information about Almanac Labs, the product, the verticals that should use the product (sports teams, sports leagues, sports events, musicians, and enterprises), the problem we are trying to solve (existing loyalty and rewards platforms are outdated and boring), the solution we bring (combination of traditional systems with the power of blockchain), and working registration and login forms.

Project Milestones:

1. Build API Library:
Objective: Create a comprehensive library of RESTful APIs and webhooks with Node.JS in Typescript to fully replicate the functionality of the Open Loyalty API, focusing on the following, but not limited to:
Client management: (registration, login, profile updates, tenant_id, administrative dashboard creation). Build Full data import/export functionality with AWS S3 and API
Client's users management: (registration (Dynamic.xyz), login (Dynamic.xyz), profile updates, web2 wallet for rewards points
Rewards management: (creation, updating, listing rewards)
Events and campaigns management: (CRUD operations for loyalty events). Build trigger-condition-effect logic to translate events into effects and enrich other systems.
NFT operations: (minting, transferring, and purchasing NFTs and cNFTs)
Authentication: Implement authentication and authorization using JWT tokens or OAuth 2.0.
Access Control: Implement Role-Based Access Control (RBAC) within Kubernetes to restrict access to namespaces. Ensure that service accounts and users have the minimum necessary permissions.
GDPR and Data Protection: Ensure that data handling practices comply with GDPR and other relevant data protection regulations. Implement mechanisms for data subject requests, such as data export or deletion.
Documentation: Ensure thorough documentation of each API endpoint, including request and response formats.

2. Multi-Tenancy with Data Isolation
a. Separate Databases:
Implementation: For each tenant (client), create a separate database instance. This ensures complete data isolation and prevents any possibility of data leakage between tenants.
Database Management: Use database orchestration tools or scripts to automate the provisioning of new databases when onboarding new tenants.
Kubernetes Namespaces:
Implementation: Deploy each tenant's application instance in its own Kubernetes namespace. This provides isolation at the infrastructure level, separating resources such as pods, services, and configurations.
Namespace Management: Use Kubernetes' native namespace features to manage and restrict access to resources within each tenant's namespace.

b. Encryption
Data at Rest:
Implementation: Enable encryption at rest for all databases. Use database features or cloud provider services that support encryption of data stored on disk.

3. Integration with Necessary Third-Party APIs and SDKs:
Objective: Integrate the following third-party services:
Metaplex: For NFT creation and management. Use solana-py for blockchain interactions. You will need to install Solana and Metaplex and build in JavaScript. The Node.js service handles NFT minting and other operations using the Metaplex Bubblegum SDK.
Stripe: For payment processing. Implement payment flows for purchasing rewards and managing subscriptions.
Amazon S3: For storage of reward images and metadata. Ensure secure upload and retrieval processes.
Google APIs: For location-based features (e.g., event check-ins) and AR experiences. Ensure proper API key management and access controls.
Documentation: Create "apidocs.almanaclabs.io" frontend and provide detailed instructions for setting up and using each integration, including any necessary authentication and configuration steps.

4. Develop Administrative Dashboards:
Objective: 
1. Build an intuitive admin dashboard using React and CoreUI, enabling clients to manage their loyalty and rewards programs. 
2. Build another administrative dashboard for Almanac developers/admins to manage clients, API usage, billing, and the multi-tenant structure.
Features:
User interface for creating and managing rewards, events, user accounts, and minting/distribution of NFT/cNFTs
Data visualization tools to display analytics and performance metrics. Include features for user data management, analytics, and environment toggling between sandbox and production.
Integration points for interacting with the backend API to perform CRUD operations on the loyalty program.
User-friendly forms for entering data and uploading images.
Testing and Validation: Implement thorough testing for both frontend and backend components to ensure reliability and performance.

5. Dual-Wallet Functionality:
Objective: Build a traditional web2 wallet for rewards points. Use the Dynamic APIs/SDK to build the
Web3 wallet (Dynamic) integration for client's users onboarding, and receiving of cNFTs/NFTs and crypto assets.

6. Enhance frontend website in CSS, HTML and JavaScript with information about Almanac Labs, who it helps (Sports teams, sports leagues, sports events, musicians, and enterprises), why the industry needs it (traditional loyalty and rewards with the unique addition of web3/blockchain), pricing (API requests, monthly SaaS, custom integration option), API documentation, and links to register and login for Almanac clients. 

Focus: Import my existing codebase first, then make the necessary changes to the directory, removing duplicate files, ensuring the appropriate extensions in the file names are correct, filepaths are pointing to the correct areas throughout the codebase, then prioritize enhancing the API library with the necessary endpoints that fully replicate the Open Loyalty API.
Multi-Tenancy: Implement the multi-tenancy structure using the tenant_id approach to isolate client data effectively.
Integrations: Ensure all necessary third-party APIs and SDKs are integrated with clear documentation on how to use them. Clients will use their own APIs for services like Amazon S3, and Google, and will use their own Solana wallet private key for minting and distributing cNFTs/NFTs. The administrative dashboard frontend must have a settings section for the client to connect their API to the backend APIs and integrations. Almanac will use its own API keys for Dynamic and Helius/Metaplex and Stripe for client payments.
Dashboard Development: Create the administrative dashboard for clients, ensuring that all functionalities are accessible and user-friendly.
Dual-wallet development: create dual wallet functionality for web2-based rewards and loyalty points and use Dynamic APIs/SDK for web3 NFT/cNFT rewards.

Third-party Integration List:
Open Loyalty: Develop fully-functional rewards and loyalty API suite to be identical to Open Loyalty API (JSON file OpenAPI specification attached)
Metaplex: Implement cNFT minting and distribution.
Amazon S3: Set up NFT data storage.
Helius: Integrate DAS API for digital assets.
Google ARCore & Geofencing: Develop AR and location-based features.
Dynamic: Enable wallet creation and management.

Third-party Integration Links to assist:
Open Loyalty: https://help.openloyalty.io/ and https://apidocs.openloyalty.io/
Metaplex: Metaplex Documentation - https://mpl-bubblegum.typedoc.metaplex.com/, https://developers.metaplex.com/bubblegum/getting-started/js, https://github.com/metaplex-foundation/umi/blob/main/docs/installation.md
Amazon S3: AWS S3 Documentation - https://aws.amazon.com/s3/
Helius: Helius DAS API - https://docs.helius.dev/compression-and-das-api/digital-asset-standard-das-api
Google ARCore Geospatial API: ARCore Geospatial API - https://developers.google.com/ar/develop/geospatial
Google Geofencing API: Google Geofencing - https://developers.google.com/location-context/geofencing
Dynamic: Dynamic Documentation - https://docs.dynamic.xyz/introduction/welcome
